
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wxsqmsmsnxgmenovnfrx.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind4c3Ftc21zbnhnbWVub3ZuZnJ4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc3NzM1NTksImV4cCI6MjA2MzM0OTU1OX0.FtYGOTlq6lFnFtJRS6gpf3wg3PJUvKt9-irLes7SeJ0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create client with more resilient configuration
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
    },
    global: {
      headers: {
        'x-application-name': 'learn-stride-online',
      },
      fetch: customFetch,
    },
    // Enhanced connection settings to improve reliability
    realtime: {
      params: {
        eventsPerSecond: 10,
      },
    },
    db: {
      schema: 'public',
    },
  }
);

// Custom fetch implementation with retries
async function customFetch(url: RequestInfo, options?: RequestInit): Promise<Response> {
  const MAX_RETRIES = 3;
  const RETRY_DELAY = 1000; // 1 second
  
  let retries = 0;
  let lastError: Error;
  
  while (retries < MAX_RETRIES) {
    try {
      const response = await fetch(url, {
        ...options,
        cache: 'no-cache',
        mode: 'cors',
      });
      
      if (response.ok) {
        return response;
      }
      
      // If response is not ok, wait and retry
      console.log(`Fetch failed with status ${response.status}, retrying...`);
      lastError = new Error(`HTTP error ${response.status}`);
    } catch (error) {
      console.error(`Fetch error (attempt ${retries + 1}/${MAX_RETRIES}):`, error);
      lastError = error as Error;
    }
    
    // Wait before retry
    await new Promise(resolve => setTimeout(resolve, RETRY_DELAY * (retries + 1)));
    retries++;
  }
  
  // All retries failed
  throw lastError || new Error('Failed to fetch after multiple retries');
}
